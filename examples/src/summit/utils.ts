import fs from "fs";

/**
 * Reads the data set generated by the `generate-dataset.ts` script
 *
 * Used to prepare an example array of inputs that can be used to showcase
 * different solutions.
 */
export function readInputDataSet(): number[] {
  if (!fs.existsSync("./dataset.json")) {
    throw new Error(
      "Missing dataset.json file. Generate one with npm run dataset:generate -- [min] [max] [count]",
    );
  }

  return JSON.parse(fs.readFileSync("./dataset.json").toString());
}

/**
 * Slices the big data set into smaller ones of fixed size to better distribute the work on the network
 */
export function chunkDataSet(inputs: number[], chunkSize: number): number[][] {
  const chunks = [];

  for (let i = 0; i < inputs.length; i += chunkSize) {
    const chunk = inputs.slice(i, i + chunkSize);
    chunks.push(chunk);
  }

  return chunks;
}

export function writeChunkFile(chunkNumber: number, inputs: number[]) {
  const path = `./dataset-chunk-${chunkNumber}.json`;
  fs.writeFileSync(path, JSON.stringify(inputs));
  return path;
}
